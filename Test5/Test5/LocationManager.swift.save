import SwiftUI
import CoreLocation
import CoreMotion

class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let locationManager = CLLocationManager()
    
    @Published var latitude: Double = 0.0
    @Published var longitude: Double = 0.0
    
    private var locationBuffer: [CLLocation] = []
    private let bufferSize = 1 // Number of previous locations to consider for the moving average
    private var lastLocation: CLLocation?
    
    @Published var totalDistance: CLLocationDistance = 0.0
    private let distanceThreshold: CLLocationDistance = 0.4
    
    
    override init() {
        super.init()
        locationManager.delegate = self
    }
    
    var coordinate: CLLocationCoordinate2D {
        CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
    }
    
    func startUpdatingLocation() {
        locationManager.requestAlwaysAuthorization()
        locationManager.desiredAccuracy = kCLLocationAccuracyBestForNavigation
        locationManager.distanceFilter = 10
        locationManager.allowsBackgroundLocationUpdates = true
        locationManager.pausesLocationUpdatesAutomatically = false
        locationManager.startUpdatingLocation()
    }
    
    func stopUpdatingLocation() {
        locationManager.stopUpdatingLocation()
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let location = locations.last {
            locationBuffer.append(location)
            
            if locationBuffer.count > bufferSize {
                locationBuffer.removeFirst()
            }
            
            let averageLatitude = locationBuffer.reduce(0.0) { $0 + $1.coordinate.latitude } / Double(locationBuffer.count)
            let averageLongitude = locationBuffer.reduce(0.0) { $0 + $1.coordinate.longitude } / Double(locationBuffer.count)
            
            latitude = averageLatitude
            longitude = averageLongitude
            
            let newLocation = CLLocation(latitude: averageLatitude, longitude: averageLongitude)
            
            if let lastLocation = lastLocation {
                let distance = newLocation.distance(from: lastLocation)
                //if (distance > distanceThreshold) {
                    totalDistance += distance
                //}
            }
            
            lastLocation = newLocation
        }
    }
    
}

