import SwiftUI
import Firebase

struct Message : Identifiable, Codable {
    var id: String
    var message: String
}
struct ContentView: View {
    @State private var errorMessage: String = "No error12"
    @State private var activityStatus: String = "???"
    @State private var motion: String = "???"
    @StateObject private var locationManager = LocationManager()
    @StateObject private var accManager = AccelerationManager()

    @State private var timer: Timer?
    
    @State private var acX: Double = 0.0
    @State private var acY: Double = 0.0
    @State private var acZ: Double = 0.0

    let db = Firestore.firestore()
    @State private var counter = 0
    
    var body: some View {
        VStack {
            /*
             Text("Current Location:")
             .lineLimit(1)
             .font(.title)
             
             Text(String(format: "%.4f, %.4f", locationManager.latitude, locationManager.longitude))
             //\(locationManager.latitude), \(locationManager.longitude))
             .lineLimit(1)
             .font(.title)
             */
            if let homeLocation = homeLocation {
                /*
                 Text("Home Location:")
                 .lineLimit(1)
                 .font(.title)
                 
                 Text(String(format: "%.4f, %.4f", homeLocation.latitude, homeLocation.longitude))
                 .lineLimit(1)
                 .font(.title)
                 */
                if let distance =  {
                    Text("Distance from Home")
                        .font(.title)
                        .lineLimit(1)
                        .padding();
                    Text(String(format: "%.2f", (distance)))
                        .font(.largeTitle)
                        .lineLimit(1)
                    Text(String(format: "%.2f", (locationManager.totalDistance)))
                        .lineLimit(1)
                        .font(.largeTitle)
                } else {
                    Text("Distance from Home: ???")
                        .font(.title)
                        .padding()
                }
            }
            
            Text("Motion: " + motion)

            Text("acX: " + String(acX))
            Text("acY: " + String(acY))
            Text("acZ: " + String(acZ))

            
            /*
             Button("Home") {
             homeLocation = locationManager.coordinate
             locationManager.totalDistance = 0.0
             }
             .font(.title)
             .padding()
             */
            
            Button(action: {
                homeLocation = locationManager.coordinate
                locationManager.totalDistance = 0.0
            }) {
                Text("Home")
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()
            
            /*
             Button(action: {
             sendMsg()
             }) {
             Text("Send Message")
             .padding()
             .background(Color.blue)
             .foregroundColor(.white)
             .cornerRadius(10)
             }
             
             .padding()
             */
            Text(errorMessage).foregroundColor(.red).padding()
            Text(activityStatus).foregroundColor(.green).padding()
        }
        .onAppear {
            locationManager.startUpdatingLocation()
            startTimer()
            startMotionActivityUpdates()
            startAccelerometer()
        }
        
    }
    
    private func startMotionActivityUpdates() {
        
        activityStatus = "entered"
        errorMessage = "entered"
            
        if CMMotionActivityManager.isActivityAvailable() {
            activityStatus = "initialized"
            
            
            motionActivityManager.startActivityUpdates(to: motionActivityQueue) { (motionActivity: CMMotionActivity?) in
                if let activity = motionActivity {
                    // Process the motion activity
                    if activity.walking {
                        activityStatus = "Walking"
                    }
                    if activity.running {
                        activityStatus = "Running"
                    }
                    if activity.cycling {
                        activityStatus = "Cycling"
                    }
                    if activity.automotive {
                        activityStatus = "Automotive"
                    }
                    if activity.stationary {
                        activityStatus = "Stationary"
                    }
                    else
                    {
                        activityStatus = "Unknown"
                    }
                }
                else
                {
                    activityStatus = "no activity"
                }
            }
        }
        else {
            activityStatus = "not available"
        }
        
    }
    
    private func startTimer() {
        timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { timer in
            // Invoke your private method here
            timerHandler()
        }
    }
    
    private func timerHandler() {
        // counter += 1
        // errorMessage = String(counter);
        // sendMsg();
    }
    
 
    private func sendMessageToFirestore() {
        
        counter += 1
        let msg = "Hello, Firestore!" + String(counter)
        let documentData: [String: Any] = [
            "message": msg
        ]
        
        let documentRef = db.collection("alerts").document("alert")
        documentRef.setData(documentData)
    }
    
    private func sendMsg()  {
        
        //counter += 1
        let alert = db.collection("alerts")
        
        let timeStamp = Date()
        
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        let formattedTimeStamp = formatter.string(from: timeStamp)
        
        
        let msg = formattedTimeStamp
        
        alert.document("alert").setData([
            "message": msg
        ])  { err in
            if let err = err {
                errorMessage = err.localizedDescription;
            } else {
                errorMessage = "success";
            }
        }
    }
    
}

